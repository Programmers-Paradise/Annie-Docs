name: Continuous Integration

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8>=6.0.0 black>=23.0.0 isort>=5.12.0 pylint>=2.17.0 mypy>=1.5.0
        
    - name: Lint with flake8
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts)" ]; then
          # Stop the build if there are Python syntax errors or undefined names
          flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        else
          echo "No Python files in scripts/ directory to lint"
        fi
        
    - name: Check formatting with black
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts)" ]; then
          black --check --diff scripts/
        else
          echo "No Python files in scripts/ directory to check formatting"
        fi
        
    - name: Check import sorting with isort
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts)" ]; then
          isort --check-only --diff scripts/
        else
          echo "No Python files in scripts/ directory to check import sorting"
        fi
        
    - name: Type checking with mypy
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts)" ]; then
          mypy scripts/ --ignore-missing-imports || true
        else
          echo "No Python files in scripts/ directory to type check"
        fi
        
    - name: Test documentation build
      run: |
        mkdocs build --clean
        
    - name: Validate workflow files
      run: |
        python -c "
        import yaml
        import os
        workflow_dir = '.github/workflows'
        for file in os.listdir(workflow_dir):
            if file.endswith('.yml') or file.endswith('.yaml'):
                with open(os.path.join(workflow_dir, file)) as f:
                    yaml.safe_load(f)
                print(f'✓ {file} is valid')
        "
        
    - name: Check for broken links in documentation
      run: |
        # Simple validation that mkdocs can serve the site
        timeout 30s mkdocs serve --dev-addr 127.0.0.1:8000 &
        SERVER_PID=$!
        sleep 5
        # Quick check that server responds
        if curl -f -s --max-time 10 http://127.0.0.1:8000 > /dev/null 2>&1; then
          echo "✓ Documentation server is responding"
        else
          echo "⚠ Warning: Local server check failed (this is non-critical)"
        fi
        # Clean up server process
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
        
    - name: Run safety check for vulnerabilities
      run: |
        safety check || true
        
    - name: Run bandit security linter
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts)" ]; then
          bandit -r scripts/ || true
        else
          echo "No Python files in scripts/ directory to scan"
        fi

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js tools
      run: |
        npm install markdownlint-cli2 alex
        
    - name: Lint markdown files
      run: |
        npx markdownlint-cli2 "**/*.md" || true
        
    - name: Check for inclusive language
      run: |
        # Check if files exist before running alex
        files_to_check=""
        if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
          files_to_check="$files_to_check docs/"
        fi
        if [ -f "README.md" ]; then
          files_to_check="$files_to_check README.md"
        fi
        if [ -f "docs-management/CONTRIBUTING.md" ]; then
          files_to_check="$files_to_check docs-management/CONTRIBUTING.md"
        fi
        
        if [ -n "$files_to_check" ]; then
          npx alex $files_to_check || true
        else
          echo "No markdown files found to check for inclusive language"
        fi
        
    - name: Validate MkDocs configuration
      run: |
        python -c "
        import yaml
        with open('mkdocs.yml') as f:
            config = yaml.safe_load(f)
        print('✓ mkdocs.yml is valid')
        print(f'Site name: {config.get(\"site_name\", \"Unknown\")}')
        print(f'Theme: {config.get(\"theme\", {}).get(\"name\", \"Unknown\")}')
        "

    - name: Check for spelling errors with codespell
      uses: codespell-project/actions-codespell@master
      with:
        path: .
        check_filenames: true
        check_hidden: true
        ignore_words_list: crate,pkg,npm,te,nd  # <-- customize as needed
